name: external-scan
on:
  push:
    branches: ['automation/**', 'automated/**']
    paths:
      - '.scan/**'
      - '.github/workflows/external-scan.yml'
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

concurrency:
  group: external-scan
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, persist-credentials: true }

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y unzip curl jq
          curl -fsSL https://github.com/projectdiscovery/subfinder/releases/latest/download/subfinder-linux-amd64.zip -o subfinder.zip
          unzip -o subfinder.zip && sudo mv subfinder /usr/local/bin/ && rm subfinder.zip
          curl -fsSL https://github.com/projectdiscovery/httpx/releases/latest/download/httpx-linux-amd64.zip -o httpx.zip
          unzip -o httpx.zip && sudo mv httpx /usr/local/bin/ && rm httpx.zip
          curl -fsSL https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei-linux-amd64.zip -o nuclei.zip
          unzip -o nuclei.zip && sudo mv nuclei /usr/local/bin/ && rm nuclei.zip

      - name: Load config
        id: cfg
        run: |
          set -euo pipefail
          TARGETS_FILE=".scan/targets.txt"
          [ -f .scan/params.env ] && source .scan/params.env || true
          echo "RATE=${RATE:-2}" >> $GITHUB_OUTPUT
          echo "CONC=${CONCURRENCY:-10}" >> $GITHUB_OUTPUT
          echo "TARGETS_PATH=$TARGETS_FILE" >> $GITHUB_OUTPUT

      - name: Run scans
        env:
          RATE: ${{ steps.cfg.outputs.RATE }}
          CONC: ${{ steps.cfg.outputs.CONC }}
          TARGETS_PATH: ${{ steps.cfg.outputs.TARGETS_PATH }}
        run: |
          set -euo pipefail
          TS="$(date -u +%Y%m%d_%H%M%S)"
          OUT_ROOT="out_${TS}"
          mkdir -p "$OUT_ROOT"
          while read -r TARGET || [ -n "$TARGET" ]; do
            [ -z "$TARGET" ] && continue
            SAFENAME="$(echo "$TARGET" | tr -cd 'A-Za-z0-9.-')"
            OUT="${OUT_ROOT}/${SAFENAME}"
            mkdir -p "$OUT" && cd "$OUT"
            subfinder -d "$TARGET" -silent -o subs.txt || true
            sort -fu subs.txt -o subs.txt
            httpx -l subs.txt -follow-redirects -status-code -title -tech-detect \
                  -ports 443,80,8080,8443,8000,3000 -silent -o live.txt || true
            nuclei -l live.txt -rate-limit "$RATE" -c "$CONC" -timeout 5 -retries 1 \
                   -tags cve,exposed-panels,misconfiguration \
                   -severity medium,high,critical \
                   -jsonl -silent -o nuclei.jsonl || true
            jq -r 'select(.info.severity=="high" or .info.severity=="critical")
                   | [.matched-at, .info.name, .info.severity, (.templateID // "")]
                   | @tsv' nuclei.jsonl > high_findings.tsv || true
            {
              echo "# Executive summary"
              echo "- Target: $TARGET"
              echo "- Subdomains: $(wc -l < subs.txt 2>/dev/null || echo 0)"
              echo "- Live services: $(wc -l < live.txt 2>/dev/null || echo 0)"
              echo "- Findings: $(wc -l < nuclei.jsonl 2>/dev/null || echo 0)"
              echo "- High/Critical: $(wc -l < high_findings.tsv 2>/dev/null || echo 0)"
              echo ""
              echo "## High/Critical details"
              if [ -s high_findings.tsv ]; then
                awk -F'\t' '{printf "- %s â€” %s (%s) [template: %s]\n",$1,$2,$3,$4}' high_findings.tsv
              else
                echo "- None in this run."
              fi
            } > report.md
            cd - >/dev/null
          done < "$TARGETS_PATH"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_id }}
          path: out_*/**
          if-no-files-found: warn

      - name: Push reports or open PR (always)
        if: always()
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TS="$(date -u +%Y%m%d_%H%M%S)"
          git config user.name "scan-bot"
          git config user.email "scan-bot@users.noreply.github.com"
          git fetch origin
          REPORTS_DIR="reports/$TS"
          mkdir -p "$REPORTS_DIR"
          find . -maxdepth 1 -type d -name 'out_*' -exec bash -c 'mv "$0"/* "$1/"' bash "$REPORTS_DIR" \; || true
          git add reports || true
          if ! git diff --staged --quiet; then
            echo "Changes found, committing..."
            git checkout -B scan-reports
            git commit -m "chore(reports): add scan results $TS"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GH_REPO}.git"
            if git push origin scan-reports; then
              echo "Pushed to scan-reports"
            else
              echo "Protected branch; creating PR instead."
              BR="reports/${TS}"
              git checkout -B "$BR"
              git push origin "$BR"
              BASE="scan-reports"
              if ! git ls-remote --heads origin --exit-code "refs/heads/$BASE"; then
                  BASE="${{ github.ref_name }}"
              fi
              curl -fsSL -X POST \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${GH_REPO}/pulls" \
                -d "{\"title\":\"reports: ${TS}\",\"head\":\"${BR}\",\"base\":\"${BASE}\",\"body\":\"Automated reports ${TS}\"}" || true
            fi
          else
            echo "No changes to commit."
          fi
