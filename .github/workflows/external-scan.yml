name: external-scan
on:
  push:
    branches: ['automation/','automated/']
    paths:
      - '.scan/'
      - '.github/workflows/external-scan.yml'
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

concurrency:
  group: external-scan
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change to your region

      - name: Install tools and s3fs
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y || (sleep 5 && sudo apt-get update -y)
          sudo apt-get install -y unzip curl jq s3fs || (sleep 5 && sudo apt-get install -y unzip curl jq s3fs)
          curl -fsSL https://github.com/projectdiscovery/subfinder/releases/latest/download/subfinder-linux-amd64.zip -o subfinder.zip
          unzip -o subfinder.zip && sudo mv subfinder /usr/local/bin/ && rm subfinder.zip
          curl -fsSL https://github.com/projectdiscovery/httpx/releases/latest/download/httpx-linux-amd64.zip -o httpx.zip
          unzip -o httpx.zip && sudo mv httpx /usr/local/bin/ && rm httpx.zip
          curl -fsSL https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei-linux-amd64.zip -o nuclei.zip
          unzip -o nuclei.zip && sudo mv nuclei /usr/local/bin/ && rm nuclei.zip

      - name: Mount S3 Bucket
        run: |
          echo "${{ secrets.AWS_ACCESS_KEY_ID }}:${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.passwd-s3fs
          chmod 600 ~/.passwd-s3fs
          mkdir -p /mnt/s3
          s3fs ${{ secrets.S3_BUCKET_NAME }} /mnt/s3 -o passwd_file=~/.passwd-s3fs -o url=https://s3.amazonaws.com -o use_cache=/tmp -o allow_other

      - name: Load params
        id: cfg
        run: |
          set -euo pipefail
          source .scan/params.env || true
          echo "RATE=${RATE:-2}" >> $GITHUB_OUTPUT
          echo "CONC=${CONCURRENCY:-10}" >> $GITHUB_OUTPUT

      - name: Run scans
        id: scan
        continue-on-error: true
        env:
          RATE: ${{ steps.cfg.outputs.RATE }}
          CONC: ${{ steps.cfg.outputs.CONC }}
        run: |
          set -euo pipefail
          TS="$(date -u +%Y%m%d_%H%M%S)"
          echo "TIMESTAMP=${TS}" >> $GITHUB_ENV
          OUT_ROOT="out_${TS}"
          mkdir -p "$OUT_ROOT" logs
          while read -r TARGET || [ -n "${TARGET:-}" ]; do
            [ -z "${TARGET:-}" ] && continue
            SAFENAME="$(echo "$TARGET" | tr -cd 'A-Za-z0-9.-')"
            OUT="${OUT_ROOT}/${SAFENAME}"
            LOG_FILE="${PWD}/logs/${SAFENAME}_${TS}.log"
            mkdir -p "$OUT" && cd "$OUT"
            echo "--- Starting scan for $TARGET at $(date) ---" | tee -a "$LOG_FILE"
            subfinder -d "$TARGET" -silent -o subs.txt 2>> "$LOG_FILE" || true
            httpx -l subs.txt -follow-redirects -status-code -title -tech-detect \
                  -ports 443,80,8080,8443,8000,3000 -silent -o live.txt 2>> "$LOG_FILE" || true
            nuclei -l live.txt -rate-limit "$RATE" -c "$CONC" -timeout 5 -retries 1 \
                   -tags cve,exposed-panels,misconfiguration \
                   -severity medium,high,critical \
                   -jsonl -silent -o nuclei.jsonl 2>> "$LOG_FILE" || true
            jq -r 'select(.info.severity=="high" or .info.severity=="critical")
                   | [."matched-at", .info.name, .info.severity, (.templateID // "")]
                   | @tsv' nuclei.jsonl > high_findings.tsv 2>> "$LOG_FILE" || true
            cd - >/dev/null
          done < .scan/targets.txt
          rsync -av --exclude='.git/' "$OUT_ROOT/" "/mnt/s3/scans/${TS}/"

      - name: Upload artifacts as fallback
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_id }}
          path: |
            logs/
            out_${{ env.TIMESTAMP }}/**
          if-no-files-found: warn

      - name: Commit and Push Reports
        if: always()
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH_NAME="scan-reports/${{ env.TIMESTAMP }}"
          git config user.name "scan-bot"
          git config user.email "scan-bot@users.noreply.github.com"
          git fetch origin
          git checkout -b "$BRANCH_NAME"
          RESULTS_DIR="reports/${{ env.TIMESTAMP }}"
          mkdir -p "$RESULTS_DIR"
          mv out_${{ env.TIMESTAMP }} "${RESULTS_DIR}/"
          if [ -z "$(git status --porcelain=v1 reports)" ]; then
            echo "No new scan results to commit."
            exit 0
          fi
          git add reports/
          git commit -m "chore(reports): Add scan results from ${{ env.TIMESTAMP }}"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GH_REPO}.git"
          git push origin "$BRANCH_NAME"

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: C1234567890 # Replace with your channel ID
          slack-message: |
            *External Scan Completed*
            Repo: ${{ github.repository }}
            Run ID: ${{ github.run_id }}
            Status: `${{ steps.scan.outcome }}`
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send Telegram Notification
        if: always()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="📡 External Scan Finished\nRepo: ${{ github.repository }}\nRun: ${{ github.run_id }}\nStatus: ${{ steps.scan.outcome }}"

      - name: Clean Up
        if: always()
        run: |
          fusermount -u /mnt/s3 || true
          rm -f ~/.passwd-s3fs

      - name: Final Status
        if: always()
        run: |
          if [ "${{ steps.scan.outcome }}" == "success" ]; then
            echo "✅ Scan completed successfully!"
          else
            echo "⚠️ Scan encountered issues, but workflow continued."
          fi
