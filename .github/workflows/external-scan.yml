name: external-scan
on:
  push:
    branches: ['automation/','automated/']
    paths:
      - '.scan/'
      - '.github/workflows/external-scan.yml'
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

concurrency:
  group: external-scan
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Preflight ensure config and log context
        run: |
          set -euo pipefail
          mkdir -p .scan logs
          # إن لم يوجد target، أنشئ قيمة افتراضية (يمكن تعديلها لاحقًا)
          [ -s .scan/targets.txt ] || echo "ziana-scan.bensalemyassine498.workers.dev" > .scan/targets.txt
          # معلمات افتراضية
          [ -s .scan/params.env ] || printf "RATE=2\nCONCURRENCY=10\n" > .scan/params.env
          echo "== GITHUB CONTEXT ==" | tee -a logs/preflight.txt
          echo "ref=$GITHUB_REF sha=$GITHUB_SHA actor=$GITHUB_ACTOR event=$GITHUB_EVENT_NAME" | tee -a logs/preflight.txt
          echo "targets:" | tee -a logs/preflight.txt
          cat .scan/targets.txt | sed 's/^/ - /' | tee -a logs/preflight.txt
          echo "params:" | tee -a logs/preflight.txt
          cat .scan/params.env | sed 's/^/ - /' | tee -a logs/preflight.txt

      - name: Install tools (with retry)
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y || (sleep 5 && sudo apt-get update -y)
          sudo apt-get install -y unzip curl jq || (sleep 5 && sudo apt-get install -y unzip curl jq)
          curl -fsSL https://github.com/projectdiscovery/subfinder/releases/latest/download/subfinder-linux-amd64.zip -o subfinder.zip
          unzip -o subfinder.zip && sudo mv subfinder /usr/local/bin/ && rm subfinder.zip
          curl -fsSL https://github.com/projectdiscovery/httpx/releases/latest/download/httpx-linux-amd64.zip -o httpx.zip
          unzip -o httpx.zip && sudo mv httpx /usr/local/bin/ && rm httpx.zip
          curl -fsSL https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei-linux-amd64.zip -o nuclei.zip
          unzip -o nuclei.zip && sudo mv nuclei /usr/local/bin/ && rm nuclei.zip

      - name: Load params
        id: cfg
        run: |
          set -euo pipefail
          source .scan/params.env || true
          echo "RATE=${RATE:-2}" >> $GITHUB_OUTPUT
          echo "CONC=${CONCURRENCY:-10}" >> $GITHUB_OUTPUT

      - name: Run scans
        env:
          RATE: ${{ steps.cfg.outputs.RATE }}
          CONC: ${{ steps.cfg.outputs.CONC }}
        run: |
          set -euo pipefail
          TS="$(date -u +%Y%m%d_%H%M%S)"
          OUT_ROOT="out_${TS}"
          mkdir -p "$OUT_ROOT" logs
          while read -r TARGET || [ -n "${TARGET:-}" ]; do
            [ -z "${TARGET:-}" ] && continue
            SAFENAME="$(echo "$TARGET" | tr -cd 'A-Za-z0-9.-')"
            OUT="${OUT_ROOT}/${SAFENAME}"
            LOG_FILE="${PWD}/logs/${SAFENAME}_${TS}.log"
            mkdir -p "$OUT" && cd "$OUT"
            echo "--- Starting scan for $TARGET at $(date) ---" | tee -a "$LOG_FILE"

            echo "Running subfinder..." | tee -a "$LOG_FILE"
            subfinder -d "$TARGET" -silent -o subs.txt 2>> "$LOG_FILE" || true
            sort -fu subs.txt -o subs.txt

            echo "Running httpx..." | tee -a "$LOG_FILE"
            httpx -l subs.txt -follow-redirects -status-code -title -tech-detect \
                  -ports 443,80,8080,8443,8000,3000 -silent -o live.txt 2>> "$LOG_FILE" || true

            echo "Running nuclei..." | tee -a "$LOG_FILE"
            nuclei -l live.txt -rate-limit "$RATE" -c "$CONC" -timeout 5 -retries 1 \
                   -tags cve,exposed-panels,misconfiguration \
                   -severity medium,high,critical \
                   -jsonl -silent -o nuclei.jsonl 2>> "$LOG_FILE" || true

            echo "Generating high-severity report..." | tee -a "$LOG_FILE"
            jq -r 'select(.info.severity=="high" or .info.severity=="critical")
                   | [."matched-at", .info.name, .info.severity, (.templateID // "")]
                   | @tsv' nuclei.jsonl > high_findings.tsv 2>> "$LOG_FILE" || true

            echo "Generating executive summary..." | tee -a "$LOG_FILE"
            {
              echo "# Executive summary"
              echo "- Target: $TARGET"
              echo "- Subdomains: $(wc -l < subs.txt 2>/dev/null || echo 0)"
              echo "- Live services: $(wc -l < live.txt 2>/dev/null || echo 0)"
              echo "- Findings: $(wc -l < nuclei.jsonl 2>/dev/null || echo 0)"
              echo "- High/Critical: $(wc -l < high_findings.tsv 2>/dev/null || echo 0)"
              echo ""
              echo "## High/Critical details"
              if [ -s high_findings.tsv ]; then
                awk -F'\t' '{printf "- %s — %s (%s) [template: %s]\n",$1,$2,$3,$4}' high_findings.tsv
              else
                echo "- None in this run."
              fi
            } > report.md

            echo "--- Finished scan for $TARGET at $(date) ---" | tee -a "$LOG_FILE"
            cd - >/dev/null
          done < .scan/targets.txt

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_id }}
          path: |
            logs/
            out_*/**
          if-no-files-found: warn

      - name: Commit and Push Reports
        if: always()
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TS="$(date -u +%Y%m%d_%H%M%S)"
          BRANCH_NAME="scan-reports/${TS}"
          git config user.name "scan-bot"
          git config user.email "scan-bot@users.noreply.github.com"
          git fetch origin
          git checkout -b "$BRANCH_NAME"

          # Move results into a structured directory
          RESULTS_DIR="reports/${TS}"
          mkdir -p "$RESULTS_DIR"
          find . -maxdepth 1 -type d -name 'out_*' -exec mv {} "${RESULTS_DIR}/" \;

          # Check if there are any results to commit
          if [ -z "$(git status --porcelain=v1 reports)" ]; then
            echo "No new scan results to commit."
            exit 0
          fi

          git add reports/
          git commit -m "chore(reports): Add scan results from ${TS}"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GH_REPO}.git"
          git push origin "$BRANCH_NAME"
